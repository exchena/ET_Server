syntax = "proto3";
// using 

package ET;

//ResponseType ObjectQueryResponse
message ObjectQueryRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
}

//ResponseType A2M_Reload
message M2A_Reload // IActorRequest
{
	int32 RpcId = 1;
}

message A2M_Reload // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2G_LockResponse
message G2G_LockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2G_LockReleaseResponse
message G2G_LockReleaseRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockReleaseResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectAddResponse
message ObjectAddRequest // IActorRequest
{
	int32 RpcId = 1;
	int32 Type = 2;
	int64 Key = 3;
	int64 InstanceId = 4;
}

message ObjectAddResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectLockResponse
message ObjectLockRequest // IActorRequest
{
	int32 RpcId = 1;
	int32 Type = 2;
	int64 Key = 3;
	int64 InstanceId = 4;
	int32 Time = 5;
}
message ObjectLockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectUnLockResponse
message ObjectUnLockRequest // IActorRequest
{
	int32 RpcId = 1;
	int32 Type = 2;
	int64 Key = 3;
	int64 OldInstanceId = 4;
	int64 InstanceId = 5;
}
message ObjectUnLockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectRemoveResponse
message ObjectRemoveRequest // IActorRequest
{
	int32 RpcId = 1;
	int32 Type = 2;
	int64 Key = 3;
}
message ObjectRemoveResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectGetResponse
message ObjectGetRequest // IActorRequest
{
	int32 RpcId = 1;
	int32 Type = 2;
	int64 Key = 3;
}
message ObjectGetResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 Type = 4;
	int64 InstanceId = 5;
}

//ResponseType G2R_GetLoginKey
message R2G_GetLoginKey // IActorRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;
}

message G2R_GetLoginKey // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Key = 4;
	int64 GateId = 5;
}

//ResponseType M2G_SessionDisconnect
message G2M_SessionDisconnect // IActorRequest

{
	int32 RpcId = 1;
	int64 unitId = 2;
}

message M2G_SessionDisconnect // IActorResponse

{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

message ObjectQueryResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes Entity = 4;
}

//ResponseType M2M_UnitTransferResponse
message M2M_UnitTransferRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 OldInstanceId = 2;
	bytes Unit = 3;
	repeated bytes Entitys = 4;
	int32 stageId = 5;		//要前往的关卡ID
}

message M2M_UnitTransferResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//更新玩家在线状态
message G2R_PlayerOnline // IActorMessage
{
	int64 PlayerInstanceId = 1;
	int64 PlayerId = 2;
}

//通知Player, 当前已离开Map
message M2Player_ExitMap // IActorMessage
{
	Unity.Mathematics.float3 CurPos = 1;
}